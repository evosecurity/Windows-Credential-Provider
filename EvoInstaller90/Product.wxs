<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
	<?include $(sys.CURRENTDIR)\Config.wxi?>

	<!-- Preconditions and pre-setups -->
	<Product Id="*" Language="1033"
			 Name="$(var.ProductName)"
			 Manufacturer="$(var.Publisher)"
			 Version="$(var.Version)"
			 UpgradeCode="a857e24b-638d-4a2e-b525-49e3d51de74d">

		<Package Id="*" InstallerVersion="405" Compressed="yes" InstallScope="perMachine" InstallPrivileges="elevated"
				 Manufacturer="$(var.Publisher)"
				 Description="$(var.ProductName) $(var.Version) Setup" />

		<MajorUpgrade AllowDowngrades="no" AllowSameVersionUpgrades="yes" MigrateFeatures="yes" DowngradeErrorMessage="A newer version is already installed!" />

		<Property Id="ARPURLINFOABOUT" Value="$(var.AppURLInfoAbout)" />
		<!--
    <Property Id="ARPNOREPAIR" Value="yes" Secure="yes" />-->
		<!-- Disable the modify button in software explorer -->
		<Property Id="ARPNOMODIFY" Value="yes" Secure="yes" />

		<Condition Message="You need to be an administrator to install this product.">
			Privileged
		</Condition>

		<!-- Custom action definitions -->
		<CustomAction Id='IsPrivileged' Error='You must be an admin to install this product' />
		<CustomAction Id="PreventDowngrading" Error="Newer version already installed." />
		<!-- END Custom action definitions-->

		<InstallExecuteSequence>
			<Custom Action='IsPrivileged' Before='AppSearch'>
				Not Privileged
			</Custom>
		</InstallExecuteSequence>

		<!-- Icons etc -->
		<Icon Id="icon.ico" SourceFile="$(var.SolutionDir)InstallerMedia\icon.ico"/>
		<Property Id="ARPPRODUCTICON" Value="icon.ico" />

		<Media Id='1' Cabinet='Sample.cab' EmbedCab='yes' DiskPrompt='DISK #1' />
		<Property Id='DiskPrompt' Value="$(var.ProductName) Setup [1]" />

		<!--<Binary Id='WiXCustomActions' SourceFile='$(var.WiXCustomActions.TargetPath)' />-->

		<Binary Id='InfoIcon' SourceFile='$(var.SolutionDir)InstallerMedia\info.ico' />
		<Binary Id='HelpIcon' SourceFile='$(var.SolutionDir)InstallerMedia\help.ico' />
		<Binary Id='ExclamIcon' SourceFile='$(var.SolutionDir)InstallerMedia\exclam.ico' />
		<!-- END  Icons etc -->
		<!-- END Preconditions and pre-setups -->

		<!-- Get values from registry if available. (What if unattended/silent install?)-->
		<Property Id="HOSTNAME" Value = "api.evosecurity.com">
			<RegistrySearch Id="SearchHostname" Root="HKLM" Key="SOFTWARE\$(var.ShortManufacturer)\$(var.SimpleProductName)" Name="hostname" Win64="$(var.Win64)" Type="raw"/>
		</Property>

		<Property Id="PATH" Value="/api/v1/desktop/">
			<RegistrySearch Id="SearchPath" Root="HKLM" Key="SOFTWARE\$(var.ShortManufacturer)\$(var.SimpleProductName)" Name="path" Win64="$(var.Win64)" Type="raw"/>
		</Property>

		<Property Id="ENVIRONMENTURL" >
			<RegistrySearch Id="SearchEnvironmentUrl" Root="HKLM" Key="SOFTWARE\$(var.ShortManufacturer)\$(var.SimpleProductName)" Name="environmentUrl" Win64="$(var.Win64)" Type="raw" />
		</Property>

		<Property Id="DOMAIN">
			<RegistrySearch Id="SearchDOMAIN" Root="HKLM" Key="SOFTWARE\$(var.ShortManufacturer)\$(var.SimpleProductName)" Name="domain" Win64="$(var.Win64)" Type="raw"/>
		</Property>

		<Property Id="RELEASE_LOG">
			<RegistrySearch Id="SearchProdLog"           Root="HKLM" Key="SOFTWARE\$(var.ShortManufacturer)\$(var.SimpleProductName)" Name="release_log"           Win64="$(var.Win64)" Type="raw" />
		</Property>

		<Property Id="EXCLUDEDUSER">
			<RegistrySearch Id="ExcludedUser" Root="HKLM" Key="SOFTWARE\$(var.ShortManufacturer)\$(var.SimpleProductName)" Name="excluded_account" Win64="$(var.Win64)" Type="raw" />
		</Property>

		<Property Id="SOLEPROVIDER"/>

		<SetProperty Action="FixRegs3" Id="RELEASE_LOG" Value="0"  Before="WriteRegistryValues" Sequence="execute">NOT (RELEASE_LOG=1)</SetProperty>


		<Directory Id="TARGETDIR" Name="SourceDir">
			<!-- Visual Studio C++ Redistributable -->
			<?if $(var.Configuration) = Debug ?>
			<?if $(var.Platform) = x64 ?>
			<Merge Id="VCRedist" SourceFile="$(var.SolutionDir)InstallerMedia\Microsoft_VC142_DebugCRT_x64.msm" DiskId="1" Language="0"/>
			<?else ?>
			<Merge Id="VCRedist" SourceFile="$(var.SolutionDir)InstallerMedia\Microsoft_VC142_DebugCRT_x86.msm" DiskId="1" Language="0"/>
			<?endif ?>
			<?else ?>
			<?if $(var.Platform) = x64 ?>
			<Merge Id="VCRedist" SourceFile="$(var.SolutionDir)InstallerMedia\Microsoft_VC142_CRT_x64.msm" DiskId="1" Language="0"/>
			<?else ?>
			<Merge Id="VCRedist" SourceFile="$(var.SolutionDir)InstallerMedia\Microsoft_VC142_CRT_x86.msm" DiskId="1" Language="0"/>
			<?endif ?>
			<?endif ?>
			<!-- END Visual Studio C++ Redistributable -->

			<!-- Directories/Components to be placed in ProgramFiles-folder -->
			<Directory Id="$(var.PlatformProgramFilesFolder)">
				<Directory Id="CompanyFolder" Name="$(var.ShortPublisher)">
					<Directory Id="INSTALLFOLDER" Name="$(var.ProductFolderName)">

						<Component Location="local" Guid="53765cdb-f170-4df2-9b83-ad49d7b88cd9" Transitive="yes">
							<Condition>1</Condition>
							<File Id="libssl" Name="libssl-1_1-x64.dll" Source="$(var.EvoCredProvider90.TargetDir)libssl-1_1-x64.dll" KeyPath="yes"/>
							<RemoveFile Id="Removelibssl" Name="libssl-1_1-x64.dll" On="uninstall"/>
						</Component>
						<Component Location="local" Guid="89bc9be0-3210-4f83-9501-20a039e058be" Transitive="yes">
							<Condition>1</Condition>
							<File Id="libcrypto" Name="libcrypto-1_1-x64.dll" Source="$(var.EvoCredProvider90.TargetDir)libcrypto-1_1-x64.dll" KeyPath="yes"/>
							<RemoveFile Id="Removelibcrypto" Name="libcrypto-1_1-x64.dll" On="uninstall"/>
						</Component>

						<Component Location="local" Guid="9b4ad2a9-bf9a-42a1-b1a0-6a7be313e06c" Transitive="yes">
							<Condition>1</Condition>
							<File Id="EvoCredProvider90"
								Name="$(var.EvoCredProvider90.TargetFileName)"
								Source="$(var.EvoCredProvider90.TargetPath)"
								KeyPath="yes" />
							<RemoveFile Id="RemoveEvoCredProviderDll" Name="$(var.EvoCredProvider90.TargetFileName)" On="uninstall"/>

							<RegistryKey Root='HKLM' Key='SOFTWARE\$(var.ShortManufacturer)\$(var.SimpleProductName)' ForceCreateOnInstall='yes' >
								<RegistryValue Name='hostname'              Type='string'  Value='[HOSTNAME]'           />
								<RegistryValue Name='path'                  Type='string'  Value='[PATH]'           />
								<RegistryValue Name='environmentUrl' Type='string' Value='[ENVIRONMENTURL]' />
								<RegistryValue Name='domain' Type='string' Value='[DOMAIN]' />
								<RegistryValue Name='release_log' Type='string' Value='[RELEASE_LOG]' />
								<RegistryValue Name='excluded_account' Type='string' Value='[EXCLUDEDUSER]' />
							</RegistryKey>

							<RegistryKey Root='HKCR' Key='CLSID\{$(var.ProviderRegistryGUID)}' ForceCreateOnInstall='yes'>
								<RegistryValue Type='string' Value='$(var.EvoCredProvider90.TargetName)' />
								<RegistryKey Key='InprocServer32'>
									<RegistryValue Type='string' Value='[INSTALLFOLDER]$(var.EvoCredProvider90.TargetFileName)' />
									<RegistryValue Name='ThreadingModel' Type='string' Value='Apartment' />
								</RegistryKey>
							</RegistryKey>

							<RegistryValue Root='HKLM' Key='SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Providers\{$(var.ProviderRegistryGUID)}' Type='string' Value='$(var.EvoCredProvider90.TargetName)' />
							<RemoveRegistryKey Root='HKLM' Key='SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Providers\{$(var.ProviderRegistryGUID)}' Action='removeOnUninstall'/>


							<RemoveFolder Id="RemoveInstallFolder" On="uninstall"/>
							<RemoveFolder Id="RemoveCompanyFolderIfEmpty" Directory="CompanyFolder" On="uninstall"/>
						</Component>

						<Component Location="local" Guid="73e6eefa-766e-4aeb-9ac1-032071af13c7">
							<File Id="CredentialProviderFilter" Name="$(var.EvoCredFilter.TargetFileName)" Source="$(var.EvoCredFilter.TargetPath)" KeyPath="yes"/>
							<RemoveFile Id="RemoveCredentialProviderFilterFiles" Name="$(var.EvoCredFilter.TargetFileName)" On="uninstall" />

							<RegistryKey Root='HKCR' Key='CLSID\{$(var.ProviderFilterRegistryGUID)}' ForceCreateOnInstall='yes'>
								<RegistryValue Type='string' Value='$(var.EvoCredFilter.TargetName)' />
								<RegistryKey Key='InprocServer32'>
									<RegistryValue Type='string' Value='[INSTALLFOLDER]$(var.EvoCredFilter.TargetFileName)' />
									<RegistryValue Name='ThreadingModel' Type='string' Value='Apartment' />
								</RegistryKey>
							</RegistryKey>

						</Component>

						<!-- Activate ProviderFilter (InstallAsDefault) component -->
						<Component Id="ActivateCredentialProviderFilter" Location="local" Guid="62ded3ec-41be-46a1-a970-0e9d2f631c40">
							<RegistryValue Root='HKLM' Key='SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Provider Filters\{$(var.ProviderFilterRegistryGUID)}' Type='string' Value='$(var.EvoCredFilter.TargetName)' KeyPath='yes' />
							<RemoveRegistryKey Root='HKLM' Key='SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\Credential Provider Filters\{$(var.ProviderFilterRegistryGUID)}' Action='removeOnUninstall'/>
						</Component>

						<!--<Component Location='local' Guid='922385D2-6165-4677-B5AA-30A20F797780'>
							<File Id='EvoApiTest' Name='EvoApiTest.exe' Source='$(var.EvoCredProvider90.TargetDir)EvoApiTest.exe' KeyPath='yes'/>
							<RemoveFile Id='RemoveEvoApiTest' Name="EvoApiTest.exe" On="uninstall" />
						</Component>-->

					</Directory>
				</Directory>
			</Directory>

		</Directory>

		<Feature Id='Complete' Title='$(var.ProductName)' Description='Full install' Display='expand' Level='1' ConfigurableDirectory='INSTALLFOLDER' AllowAdvertise='no' Absent='disallow' InstallDefault="local">
			<Feature Id='MainInstall' Title='Core components' Description='Core $(var.ProductName) components' Level='1' AllowAdvertise='no' Absent='disallow' InstallDefault="local">
				<ComponentRef Id='libssl' />
				<ComponentRef Id='libcrypto' />
				<ComponentRef Id='EvoCredProvider90' />
			</Feature>

			<Feature Id='InstallAsDefault' Title='Sole credential provider' Description='Install $(var.ProductName) as sole credential provider. Users will be required to use Evo Secure Login.' Level='1000' AllowAdvertise='no' InstallDefault="local">
				<Condition Level="1">SOLEPROVIDER=1</Condition>
				<Condition Level="0">SOLEPROVIDER=0</Condition>
				<ComponentRef Id='CredentialProviderFilter' />
				<ComponentRef Id='ActivateCredentialProviderFilter' />
			</Feature>

			<!--<Feature Id='ApiTest' Title='Evo API Test' Description='Command line utility to test connection' Level='1000' AllowAdvertise='no' InstallDefault="local">
				<ComponentRef Id='EvoApiTest' />
			</Feature>-->

			<Feature Id="VCRedist" Title="Visual C++ Runtime" AllowAdvertise="no" Display="hidden" Level="1">
				<MergeRef Id='VCRedist'/>
			</Feature>

		</Feature>

		<!-- WiX Configuration -->
		<WixVariable Id="WixUILicenseRtf" Value="$(var.SolutionDir)InstallerMedia\EvoLicense.rtf" />
		<WixVariable Id="WixUIBannerBmp" Value="$(var.SolutionDir)InstallerMedia\header.bmp" />
		<WixVariable Id="WixUIDialogBmp" Value="$(var.SolutionDir)InstallerMedia\setup-screen.bmp" />
		<!-- END WiX Configuration -->

		<UI Id="MyWixUI_FeatureTree">
			<UIRef Id="WixUI_FeatureTree"/>

			<!-- Custom dialogs -->
			<DialogRef Id="ServerConfigurationDlg" />

			<!-- Queue custom dialogs start/end -->
			<!-- Start -->
			<Publish Dialog="CustomizeDlg" Control="Next" Event="NewDialog" Value="ServerConfigurationDlg">1</Publish>
			<!-- End -->
			<Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="ServerConfigurationDlg" Order="1">NOT Installed OR (WixUI_InstallMode = "Change" AND USER_IS_ADMINISTRATOR = "1" )</Publish>
			<!-- END Queue custom dialogs -->
		</UI>

	</Product>
</Wix>